#Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
#Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
#Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

#from sys import argv

#work_time, wages, bonus = argv
#try:
#    work_time = int(input(time))
#    wages = int(input(wages))
#    bonus = int((inputbonus))
#    res = time * salary + bonus
#    print(f'Заработная плата сотрудника: {res}')
#except ValueError:
#    print('Ошибка')

#Представлен список чисел.
#Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.

my_list = [1, 892, 2, 1, 18, 44, 290, 7, 12]
my_new_list = [el for num, el in enumerate(my_list) if my_list[num - 1] < my_list[num]]
print(f'Исходный список чисел {my_list}')
print(f'Новый список чисел {my_new_list}')

#Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.

print(f'Числа от 20 до 240 кратные 20 или 21: {[el for el in range(20, 240) if el % 20 == 0 or el % 21 == 0]}')

#Представлен список чисел. Определите элементы списка, не имеющие повторений.
#Сформируйте итоговый массив чисел, соответствующих требованию.
#Элементы выведите в порядке их следования в исходном списке.
#Для выполнения задания обязательно используйте генератор.

my_list = [44, 12, 12, 67, 44, 25, 2, 12, 13, 178, 311, 3, 311]
my_new_list = [el for el in my_list if my_list.count(el)==1]
print(my_new_list)

#Реализовать формирование списка, используя функцию range() и возможности генератора.
#В список должны войти чётные числа от 100 до 1000 (включая границы).
#Нужно получить результат вычисления произведения всех элементов списка.
#Подсказка: использовать функцию reduce().

from functools import reduce
def my_func(el_p, el):
    return el_p * el

print(f'Список четных значений: {[el for el in range(99, 1001) if el % 2 == 0]}')
print(f'Произведение всех элементов списка: {reduce(my_func, [el for el in range(99, 1001) if el % 2 == 0])}')

#Реализовать итератор, генерирующий целые числа, начиная с указанного
#итератор, повторяющий элементы некоторого списка, определённого заранее


from itertools import count
from itertools import cycle

def my_count_func(start_number, stop_number):
    for el in count(start_number):
        if el > stop_number:
            break
        else:
            print(el)
my_count_func(start_number = int(input("Введите первое число: ")), stop_number = int(input("Введите последнее число: ")))
def my_cycle_func(my_list, iteration):
    i = 0
    iter = cycle(my_list)
    while i < iteration:
        print(my_list)
        i+=1
my_cycle_func(my_list = [1, 2, True, None, 'Abracadabra', 34, 57, 'kadabra'], iteration = int(input("Введите количество повторений: ")))

